// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pessman/go-requests (interfaces: Request)

// Package mock_go_requests is a generated GoMock package.
package mock_go_requests

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	response "github.com/pessman/go-requests/response"
)

// MockRequest is a mock of Request interface.
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
}

// MockRequestMockRecorder is the mock recorder for MockRequest.
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance.
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// BytesResponse mocks base method.
func (m *MockRequest) BytesResponse() (*response.BytesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesResponse")
	ret0, _ := ret[0].(*response.BytesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BytesResponse indicates an expected call of BytesResponse.
func (mr *MockRequestMockRecorder) BytesResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesResponse", reflect.TypeOf((*MockRequest)(nil).BytesResponse))
}

// Response mocks base method.
func (m *MockRequest) Response() (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response")
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Response indicates an expected call of Response.
func (mr *MockRequestMockRecorder) Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockRequest)(nil).Response))
}
